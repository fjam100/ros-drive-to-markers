#!/usr/bin/env python
import actionlib
import rospy
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from geometry_msgs.msg import Twist
from geometry_msgs.msg import PoseWithCovarianceStamped
from sensor_msgs.msg import LaserScan
import pickle
import sys
from random import shuffle
from std_msgs.msg import String
import thread, time


position_list = [ 
[(2.5, 1.0, 0.0), (0.0, 0.0, 0.0, 1.0)],
[(5.5, 5.5, 0.0), (0.0, 0.0, -0.984047240305, 0.177907360295)],
[(6.5, 4.5, 0.0), (0.0, 0.0, 0.0, 1.0)],
[(5.5, 2.0, 0.0), (0.0, 0.0, 0.0, 1.0)]
]
pickle.dump(position_list, open( "save.p", "wb" ) )


with open('save.p') as file:
	position_list=pickle.load(file)

global action_state
action_state=0
global home

def goal_pose(pose): 
	goal_pose = MoveBaseGoal()
	goal_pose.target_pose.header.frame_id = 'map'
	goal_pose.target_pose.pose.position.x = pose[0][0]
	goal_pose.target_pose.pose.position.y = pose[0][1]
	goal_pose.target_pose.pose.position.z = pose[0][2]
	goal_pose.target_pose.pose.orientation.x = pose[1][0]
	goal_pose.target_pose.pose.orientation.y = pose[1][1]
	goal_pose.target_pose.pose.orientation.z = pose[1][2]
	goal_pose.target_pose.pose.orientation.w = pose[1][3]
	return goal_pose

def scan_callback(scan):	
	global action_state	
	client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
	client.wait_for_server()
	
	if action_state==1:
		goal = goal_pose(home)
		client.send_goal(goal)
		client.wait_for_result()
		print('Saving LaserScan data to scanData.pickle')
		print len(scan.ranges)
		with open('scanData.pickle', 'wb') as handle:
 			pickle.dump(scan.ranges, handle)
		action_state=0

	elif action_state==2:	
		shuffle(position_list)
		action_state=0
		#print(position_list)
	
	else:
		for pose in position_list:
			goal = goal_pose(pose)
			client.send_goal(goal)
			if action_state!=0:
				break
			print('Saving LaserScan data to scanData.p')
			print len(scan.ranges)
			pickle.dump(scan.ranges, open( "scanData.p", "wb" ) )

def key_callback(inputkey):
	if inputkey.data=='h':
		print('Aborting and returning home as soon as marker is reached')
		action_state=1
	if inputkey.data=='r':
		print('Randomly reordering position_list after reaching current marker')
		action_state=2

def amcl_callback(indata):
	global home	
	home=indata
	#print home.pose.pose.position.x
	sub_once.unregister()

if __name__ == '__main__':
	rospy.init_node('patrol')
	#a=sys.stdin.read(1)
	#print(a)
	rospy.Subscriber('scan', LaserScan, scan_callback)
	rospy.Subscriber('input_key', String, key_callback)
	sub_once=rospy.Subscriber('amcl_pose', PoseWithCovarianceStamped, amcl_callback)

	rospy.spin()
